; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
;===============================================================================
; import machine-specific headers:
;-------------------------------------------------------------------------------
.DEF    lo              0
.DEF    hi              1

.IFDEF  SYSTEM_C64
        .INC    "system/c64/c64.wla"
.ENDIF
.IFDEF  CPU_65XX
        .INC    "system/65xx.wla"
.ENDIF

; data-types:
;===============================================================================
.DEF    TYPE_BYTE       %00000000
.DEF    TYPE_EOD        %00000001       ; "End Of Data" (read / write)
.DEF    TYPE_WORD_LO    %10000000
.DEF    TYPE_WORD_HI    %11000000
.DEF    TYPE_FLOAT      %01000000
.DEF    TYPE_FLOAT1     %01000100
.DEF    TYPE_FLOAT2     %01000011
.DEF    TYPE_FLOAT3     %01000010
.DEF    TYPE_FLOAT4     %01000001
.DEF    TYPE_FLOAT5     %01000000

;===============================================================================
.DEF    IMMEDIATE       %10000000
.DEF    HIDDEN          %01000000
.DEF    NO_TAIL_CALL    %00100000
.DEF    TERMLEN_MASK    %00011111       ; term name up to 31 chars

;-------------------------------------------------------------------------------
.DEF    prev_term       $0000

.MACRO  _term   ARGS    str
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        .WORD   prev_term
        .REDEF  prev_term       CADDR - 2
        .BYTE   str.length, str
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.ENDM

push_byte:
        ;=======================================================================
        ; push a byte onto the data stack,
        ; setting the data-type too
        ;
        ;   A = value
        ;
        ;-----------------------------------------------------------------------
        dex
        sta zp_stack, x
        lda # TYPE_BYTE
        sta zp_type, x
        rts

push_word:
        ;=======================================================================
        ; push a word onto the data stack,
        ; setting the data type too
        ;
        ;   A = value, lo-byte
        ;   Y = value, hi-byte
        ;
        ;-----------------------------------------------------------------------
        ; push the stack pointer down twice first
        ; (TODO: add stack-overflow checking)
        dex
        dex
        ; write the lo-byte first at the new top-most position
        sta zp_stack-0, x
        lda # TYPE_WORD_LO
        sta zp_type-0, x
        ; write the hi-byte underneath that
        tya
        sta zp_stack+1, x
        lda # TYPE_WORD_HI
        sta zp_type+1, x

        rts

pop:    ;=======================================================================
        ; pop a value off of the top of the stack
        ; returns:
        ; 
        ;       A = word lo-byte, or single byte
        ;       Y = word hi-byte (if data is a word)
        ;       c = 0 for a byte, 1 for a word 
        ;
        ;-----------------------------------------------------------------------
        ; TODO: we'll need to check for stack underflow
        ;       before we try to ascertain the data-type!
        inx

        ; was the top-most item a byte or a word?
        lda zp_type-1, x        ; get the data type
        cmp # 0                 ; return c=1 for word, and c=0 for byte!
        bmi +

        ; read a byte:
        lda zp_stack-1, x
        rts

        ; read a word:
+       inx                     ; move the stack up another byte
.IFDEF  CPU_65C02
        lda zp_stack-2, x
        ldy zp_stack-1, x
.ELSE   ;6502
        ; read the hi-byte first, to put it into Y
        ldy # 0
        lda zp_stack-1, x
        tay
        lda zp_stack-2, x
.ENDIF
        rts

.INC    "console.wla"
.INC    "disk.wla"
.INC    "core.wla"
.INC    "interpret.wla"