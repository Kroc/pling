; Pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
;===============================================================================
.DEF    NUL             0
.DEF    LO              0
.DEF    HI              1

; import machine-specific headers:
;-------------------------------------------------------------------------------
.IFDEF  SYSTEM_CBM
        .INC    "cbm/cbm.wla"
.ENDIF
.IFDEF  CPU_65XX
        ; macros for 6502-based systems (6502, 6510, 65C02)
        ; to polyfill differences in instruction sets
        .INC    "cpu_65xx.wla"
.ENDIF

; RAM variables:
;===============================================================================
.RAMSECTION "ZP_ADDR"   SLOT $00        RETURNORG
        ;-----------------------------------------------------------------------
        ; a temporary address available for indirect addressing
        zp_addr         WORD
        ; an index for walking bytes
        zp_index        BYTE
        ; output value
        zp_word         WORD
.ENDS

.RAMSECTION "ZP_TEMP"   SLOT $00        RETURNORG
        ;-----------------------------------------------------------------------
        ; a temporary value available for conversions
        zp_temp        .WORD
        zp_temp1        DB
        zp_temp2        DB
.ENDS

.RAMSECTION "ZP_REG"    SLOT $00        RETURNORG
        ;-----------------------------------------------------------------------
        ; temporary locations for backing up registers;
        ; cannot be nested, so should only be used within
        ; routines that do not call any other routines
        zp_x            BYTE
        zp_y            BYTE
.ENDS

.RAMSECTION "ZP_NUM"    SLOT $00        RETURNORG
        ;-----------------------------------------------------------------------
        ; number base (2, 10, 16) used during number parsing
        zp_int_base     BYTE
        ; integer sign used during parsing:
        ; $00 = +ve, $01 = -ve (to allow shifting in)
        zp_sign         BYTE
        ; overflow status word
        zp_overflow     WORD
.ENDS

;===============================================================================
.INC    "ascii.wla"             ; ASCII constants / routines
.INC    "print.wla"             ; screen output
.INC    "stack.wla"             ; Pling's data/type stack routines
.INC    "error.wla"             ; error handling
.INC    "channel.wla"           ; I/O channels
.INC    "assemble.wla"          ; for assembling code into new terms
.INC    "console.wla"           ; interactive shell UI

; shared Pling initialisation:
;===============================================================================
; TODO: ideally we will want some kind of term to reset the whole interpretter
;
pling_init:
        ;-----------------------------------------------------------------------
        ; reset Pling's stacks
        ;-----------------------------------------------------------------------
        ldy # PL_STACK_SIZE-1
-       lda # $00               ; set stack data to $00
        sta zp_stack, y
        lda # TOKEN_EOD         ; set data-type to EOD
        sta zp_type, y
        dey
        bpl -
        
        ; put in place the stack error markers that exist at either end
        ; of the stack to automatically catch under/overflow
        lda # TOKEN_STK
        sta zp_type_und
        sta zp_type_ovr

        ;-----------------------------------------------------------------------
        ; set the last term to have been defined:
        ; (this is the address of the term's header, not its code)
        lda #< _last
        ldy #> _last
        sta zp_last+LO
        sty zp_last+HI
        
        ; set the user-space starting address,
        ; where new terms will be compiled
        lda #< begin_here
        ldy #> begin_here
        sta zp_here+LO
        sty zp_here+HI

        ; set the default delimiter for the interpreter (ASCII)
        lda # ' '
        sta pl_delimiter

        ; clear the term-name buffer
        lda # $00
        ldy # PL_TERM_LEN-1
-       sta pl_term_name, y
        dey
        ; note that the first byte (Y=0) is the string-length,
        ; which must also be initialised to 0
        bpl -

        ; set the data stack pointer to the starting (empty) position:
        ; note that this will not be the first item position on the stack,
        ; but the underflow position above the stack -- the stack is empty /
        ; underflowed until the first item is pushed on it
        ;
        ; from this point on, register X will be the data stack's index,
        ; unless backed up / restored by a routine
        ldx # PL_STACK_SIZE

        ; start the interactive shell:
        ;-----------------------------------------------------------------------
        jmp console_init


; built-in terminology:
;===============================================================================
; here begins the built-in "terms" (Pling functions)
;
.INC    "term.wla"

;===============================================================================
; WARNING: *ANY* code / data placed after this point
; will be overwritten by the compiler!
; 
begin_here: