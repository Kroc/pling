; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; pling_c64.wla : main program file for the Commodore 64
;===============================================================================
; set the system to a C64, the include below will do
; the rest of the importing of machine-specific definitions
;
.DEF    SYSTEM_C64      1
.INC    "system/pling.wla"

;===============================================================================
.INC    "system/cbmbasic.wla"

init:
        ;-----------------------------------------------------------------------
        ; reset Pling's stacks
        ;-----------------------------------------------------------------------
        ldy # PL_STACK_SIZE-1
-       lda # $88
        sta zp_stack, y
        lda # TYPE_BYTE
        sta zp_type, y
        dey
        bpl -

        ldx # PL_STACK_SIZE

        ; upon initialising, set the user-space starting address,
        ; where new terms will be compiled
        lda #< pl_code
        sta zp_here+lo
        lda #> pl_code
        sta zp_here+hi

        ; set up the screen:
        ;-----------------------------------------------------------------------
        ; change the screen colour; we could use Pling's BIOS routines
        ; but it would end up more code to push and pull from the stack
        lda # VIC_BLACK
        sta VIC_BORDER
        sta VIC_BACKGROUND
        ; call the routine to clear the console
        jsr term_con_clear
        ; set the text colour
        lda # VIC_YELLOW
        sta zp_crsr_colour

.DEF    _str    $0e, $93, $9e
.REDEF  _str    _str, $12, "OK                    USER:16384 HEAP:64", $92
.REDEF  _str    _str, 13, ">!< Pling! by Kroc Camen"
.REDEF  _str    _str, 13,"    <github.com/Kroc/pling>"
.REDEF  _str    _str, 13, "    built: ", WLA_TIME

        ldy # 0
-       lda @ver.w, y
        jsr KERNAL_CHROUT
        iny
        cpy # _str.length
        bne -

        ;-----------------------------------------------------------------------
        lda # 4
        jsr push_byte
        lda #< @test
        ldy #> @test
        jsr push_word

        jsr term_io_chain

-       jmp -

@ver:   .ASC    _str

@test:  .ASC    "test", 0

;===============================================================================
.INC    "terms.wla"