; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; print.wla : screen output
;===============================================================================
; label:                    stack:              term-name:
;-------------------------------------------------------------------------------
; term_print_newline:         --                ".n"
; term_print:               b --                "."
; term_print_dec:           i --                ".dec"
; term_print_hex:           i --                ".hex"
; term_print_bin:           i --                ".bin"
;

; .n ( -- )
;===============================================================================
; print a newline (CR/LF) character:
;
;-------------------------------------------------------------------------------
        .term   ".n"

term_print_newline:
        ;-----------------------------------------------------------------------
        lda # PET_RETURN
        jmp sys_emit            ; print, skipping character conversion


; . ( b -- )
;===============================================================================
; print the byte atop the stack as an ASCII character:
; data-type error occurs if top of stack is not a byte
;
; in:   byte    ASCII code to print to screen
;
;-------------------------------------------------------------------------------
        .term   "."

term_print:
        ;-----------------------------------------------------------------------
        ; pop the byte (checking for underflow)
        jsr pop_byte
        ; jump to the system-specific print routine that will do ASCII
        ; conversion to the system's character encoding and handle
        ; writing to the screen
        jmp sys_print


; .int ( i -- )
;===============================================================================
; print the integer atop the stack as a decimal string:
;
; in:   int     integer (byte or word) to print as decimal
;
;-------------------------------------------------------------------------------
        .term   ".int"

term_print_int:
        ;-----------------------------------------------------------------------
        ; pop the integer (byte or word), checking for underflow
        ; TODO: optimised routine for printing a byte
        jsr pop_int
        ; A = lo, Y = hi is always returned,
        ; even if the item was a byte
        sta zp_word+LO
        sty zp_word+HI

; adapted from:
; <http://forum.6502.org/viewtopic.php?p=55800#p55800>
;
@print:
        lda # 0                 ; null delimiter for print
        pha
@div10: ; divide value by 10
        lda # 0
        sta zp_temp2            ; clr BCD
        lda # 16
        sta zp_temp1            ; {>} = loop counter

@loop:  asl zp_word+LO          ; value is gradually replaced
        rol zp_word+HI          ; with the quotient
        rol zp_temp2            ; BCD result is gradually replaced
        lda zp_temp2            ; with the remainder
        sec
        sbc # 10                ; partial BCD >= 10 ?
        bcc +
        sta zp_temp2            ; yes: update the partial result
        inc zp_word+LO          ; set low bit in partial quotient

+       dec zp_temp1
        bne @loop               ; loop 16 times
        
        lda zp_temp2
        ora # '0'               ; convert BCD result to ASCII
        pha                     ; stack digits in ascending
        lda zp_word+LO          ; order ('0' for zero)
        ora zp_word+HI
        bne @div10              ; } until value is 0
        pla

-       jsr sys_emit            ; print digits in descending
        pla                     ; order until delimiter is
        bne -                   ; encountered

        rts


; .hex ( i -- )
;===============================================================================
; print the integer atop the stack as a hexadecimal string:
;
; in:   int     integer (byte or word) to print as hexadecimal
;
; <http://beebwiki.mdfs.net/Number_output_in_6502_machine_code>
;-------------------------------------------------------------------------------
        .term   ".hex"

term_print_hex:
        ;-----------------------------------------------------------------------
        jsr pop_int
        bcs @word

        jmp @print

        ;-----------------------------------------------------------------------
@word:  pha
        tya
        jsr @print
        pla

        ;-----------------------------------------------------------------------
@print: tay

        ; move top nybble to bottom nybble
        lsr
        lsr
        lsr
        lsr
        jsr @conv

        tya
        and # %00001111         ; mask out original bottom nybble

@conv:  ;-----------------------------------------------------------------------
        ; NMOS 6502's (including the 6510) have a bug whereby the decimal flag
        ; is not guaranteed to clear on system-startup or interrupt. this means
        ; that `cld` *must* be used by the system during interrupts to avoid
        ; decimal mode in your code leaking into the interrupt routine!
        ;
        ; (this bug is fixed on CMOS-based 6502's such as the 65C02 & 65C816)
        ;
        ; whilst the C64 KERNAL does clear the decimal mode on startup,
        ; it does not clear it upon ROM-enabled interrupt, meaning that
        ; we must disable interrupts any time we are using decimal mode!
        ;
        ; the time spent in decimal mode / interrupts-off must be kept to
        ; a minimum as it may otherwise impact the C64's interrupt-driven
        ; jiffy-clock -- this is why we don't do the character printing
        ; with interrupts disabled: we don't know how long this will take
        ; on any particular system, and some systems may pause for
        ; user-input when scrolling
        ;
.IFDEF  CPU_6502
        sei                     ; disable interrupts
        sed                     ; turn decimal mode on
.ENDIF
        clc
        adc # $90               ; produce $90-$99 or $00-$05
        adc # $40               ; produce $30-$39 or $41-$46

.IFDEF  CPU_6502
        cld                     ; turn decimal mode off
        cli                     ; re-enable interrupts
.ENDIF
        jmp sys_emit


; .bin ( i -- )
;===============================================================================
; print the integer atop the stack as a binary string:
;
; in:   int     integer (byte or word) to print as binary
;
;-------------------------------------------------------------------------------
        .term   ".bin"

term_print_bin:
        ;-----------------------------------------------------------------------
        ; check the data-type of the item atop the stack
        lda zp_type, x
        bmi @word
        beq @byte

        jmp err_type

        ; print the hi-byte first by moving to the
        ; 2nd byte in the stack and printing that
        ; TODO: a more efficient way to do this?
@word:  inx
        jsr @byte
        dex
        dex

@byte:  ldy # '0' >> 1
        
        asl zp_stack, x
        tya
        rol
        jsr sys_emit            ; print bit 7
        
        asl zp_stack, x
        tya
        rol
        jsr sys_emit            ; print bit 6

        asl zp_stack, x
        tya
        rol
        jsr sys_emit            ; print bit 5

        asl zp_stack, x
        tya
        rol
        jsr sys_emit            ; print bit 4

        asl zp_stack, x
        tya
        rol
        jsr sys_emit            ; print bit 3

        asl zp_stack, x
        tya
        rol
        jsr sys_emit            ; print bit 2

        asl zp_stack, x
        tya
        rol
        jsr sys_emit            ; print bit 1

        asl zp_stack, x
        tya
        rol
        jsr sys_emit            ; print bit 0

        ; once the byte has been printed,
        ; we discard it by raising the stack
        inx
        rts