; Pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; term_string.wla
;===============================================================================
; label:                    stack:              term-name:
;-------------------------------------------------------------------------------
; term_asc2lower:           b -- b              asc2lower
; term_asc2upper:           b -- b              asc2upper
; str-len:                  a -- b              str-len
;

; asc2lower ( b -- b )
;===============================================================================
; convert an ASCII character to lower-case:
;
;-------------------------------------------------------------------------------
        .term   "asc2lower"

term_asc2lower:
        ;-----------------------------------------------------------------------
        ; no need to pop+push, we'll just rewrite the value atop the stack.
        ; first, peek the byte atop the stack, verifying data-type & underflow
        jsr peek_byte
        ; the ASCII character code obtained,
        ; do the conversion: (see "ascii.wla")
        jsr asc2lower
        ; update the value already on the stack:
        ; we've already error-checked with the peek,
        ; so we don't need to use a routine for it
        sta STACK_TOP, x
        rts


; asc2upper ( b -- b )
;===============================================================================
; convert an ASCII character to upper-case:
;
;-------------------------------------------------------------------------------
        .term   "asc2upper"

term_asc2upper:
        ;-----------------------------------------------------------------------
        ; no need to pop+push, we'll just rewrite the value atop the stack.
        ; first, peek the byte atop the stack, verifying data-type & underflow
        jsr peek_byte
        ; the ASCII character code obtained,
        ; do the conversion: (see "ascii.wla")
        jsr asc2upper
        ; update the value already on the stack:
        ; we've already error-checked with the peek,
        ; so we don't need to use a routine for it
        sta STACK_TOP, x
        rts


; str-len ( a -- b )
;===============================================================================
; get the length of a string:
; the address of the string is consumed and the length is returned
;
;-------------------------------------------------------------------------------
        .term   "str-len"

term_str_len:
        ;-----------------------------------------------------------------------
        jsr pop_addr            ; pull the string address from the stack

        ; count the non-null bytes:
        ;
        ; if there's a way to do this faster,
        ; illegal opcodes included, please let me know
        ldy # 0
-       lda [zp_addr], y                                                ;+5=5
        bne +                                                           ;+2=7
        iny                                                             ;+2=9
        bne -                                                           ;+3=12

+       rts