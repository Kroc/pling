; Pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; cbm_init.wla : system intialisation for CBM machines
;===============================================================================
; start the program's code with the BASIC bootstrap
; to jump to the machine code that follows:
;
.INC    "cbm/cbm_basic.wla"

sys_init:
;===============================================================================
        ldx # $ff               ; throw away the current return stack,
        txs                     ; we won't be returning to BASIC

        ; for C64-only, we utilise
        ; BSOD64 to do some debugging:
        ;
.IFDEF  SYSTEM_C64
        ;///////////////////////////////////////////////////////////////////////
        ; prepare KERNAL for loading
        ;
        ldx ZP_KERNAL_DEV       ; last-used KERNAL device number
        bne +                   ; not 0? good
        ldx # DEV_DRV8          ; default to drive 8
+       ldy # $01               ; use PRG-provided load-address
        tya                     ; logical file number
        jsr KERNAL_SETLFS

        ldx #< @bsod64
        ldy #> @bsod64
        lda # 6                 ; A is string-length
        jsr KERNAL_SETNAM       ; set KERNAL file name

        lda # $00               ; load, not verify
        jsr KERNAL_LOAD

        bcc +

-       inc VIC_BORDER
        jmp -

        ; enable BSOD64's hooks to trap BRK
        ; instructions and the RESTORE key
+       jsr $c000

        ; begin the system-independent
        ; Pling! initialisation
        jmp pling_init

@bsod64:
        .ASC    "bsod64", 0

.ELSE   ;///////////////////////////////////////////////////////////////////////
        ; begin the system-independent
        ; Pling! initialisation
        jmp pling_init
.ENDIF  ;///////////////////////////////////////////////////////////////////////