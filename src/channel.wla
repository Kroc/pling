; Pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; channel.wla : native code for I/O channels
;===============================================================================
; channels are Pling!'s way of abstracting various forms of I/O into a single,
; portable interface. channels isolate the programmer from manual memory
; management as well as providing protection from buffer-overruns
;
;       +------------+           +-----------+
;       |  instance  |---------->|  channel  |
;       +------------+           +-----+-----+
;                                      |
;            +------------+------------+------------+------------+-- ...
;            |            |            |            |            |
;       +----+----+  +----+----+  +----+----+  +----+----+  +----+----+
;       |  open   |  |  read   |  |  write  |  |  seek   |  |  close  |
;       +---------+  +---------+  +---------+  +---------+  +---------+
;
.ENUMID 0
.ENUMID CHANNEL_OPEN
.ENUMID CHANNEL_READ
.ENUMID CHANNEL_WRITE
.ENUMID CHANNEL_SEEK
.ENUMID CHANNEL_CLOSE

.INC    "channel_str.wla"
.INC    "channel_input.wla"


; static strings:
;
; 1. write the static string to user-space, noting the starting address
;
; 2. create a new term to push that address to the stack and execute
;    the string-channel interface
;

; creating a channel involves:
;
; * reserving space for the instance's variables, e.g. seek-position
;
; * creating a new term that pushes the channel instance's address on the stack
;   and calling the generic interface, e.g. `: my_channel $nnnn channel_str ;`
;
