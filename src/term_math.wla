; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; term_math.wla : core number & math routines
;===============================================================================
; label:                    stack:              term-name:
;-------------------------------------------------------------------------------
; term_0                      -- b              "0"
; term_00                     -- w              "00"
; term_add                i i -- i              "+"
; term_add1                 i -- i              "+1"
; term_sub                i i -- i              "-"
; term_sub1                 i -- i              "-1"
; term_neg                  i -- i              "neg"
; term_neg                  i -- i              "not"
;

; 0 ( -- b )
;===============================================================================
; pushes zero (as a byte) on to the stack;
; an optimisation to avoid the number-parser
;
;-------------------------------------------------------------------------------
        .term   "0"

term_0:
        ;-----------------------------------------------------------------------
        ; normally we would call `push_byte`, but since we know the value
        ; will be zero, and the byte data-type is zero as well, we can combine
        ; them. this optimisation relies upon `TYPE_BYTE` being zero, so we
        ; sanity check this in case of unintended change in the future
        ;
        .IF TYPE_BYTE != 0
                .PRINT "TYPE_BYTE is not 0!"
                .FAIL
        .ENDIF

        ; lower the stack to make room for the byte
        .lowerStack

        ; write two zeroes:
.IFDEF  CPU_65C02
        stz zp_stack, x
        stz zp_type, x
.ELSE   ;6502
        lda # 0
        sta zp_stack, x
        sta zp_type, x
.ENDIF
        rts

; 00 ( -- w )
;===============================================================================
; pushes zero (as a word) on to the stack;
; an optimisation to avoid the number-parser
;
;-------------------------------------------------------------------------------
        .term   "00"

term_00:
        ;-----------------------------------------------------------------------
        ; push the stack pointer down twice first
        .lowerStack2
        ; write the lo/hi-byte
.IFDEF  CPU_65C02
        stz zp_stack+0, x
        stz zp_stack+1, x
.ELSE   ;6502
        lda # 0
        sta zp_stack+0, x
        sta zp_stack+1, x
.ENDIF
        ; set the word data-type
        jmp set_type_word


; + ( i i -- i )
;===============================================================================
; add the top two integers on the stack together, returning a single integer.
; the size of the return integer will be:
;
;       byte + byte     = byte
;       byte + word     = word
;       word + byte     = word
;       word + word     = word
;
; in all instances, any overflow will go into the `overflow` variable
;-------------------------------------------------------------------------------
        .term   "+"

term_add:
        ;-----------------------------------------------------------------------
        jsr pop_int             ; pop the top integer, regardless of type
        pha                     ; keep a hold of the byte/lo-byte
        bcs @word               ; the carry will be 0 = byte, 1 = word

        ;-----------------------------------------------------------------------
        ; if the first integer was a byte, then check the type of the second
        ; (we won't pop it, rather just rewrite the top of the stack)
        ;
@byte:  lda zp_type, x
        ; if either parameter is a word,
        ; then the output is always a word
        bne @word

        ; byte + byte:
        ;-----------------------------------------------------------------------
        ; the top of the stack is already
        ; a byte, so no need to push or extend
        ;
        pla                     ; restore the first integer
        adc zp_stack, x         ; add the second
        
        ; handle the carry:
        ;
        ; even adding two words can only overflow 1-bit at most,
        ; so the hi-byte of the overflow word will always be zero
        lda # 0
        sta zp_overflow+HI
        rol                     ; add the carry to zero for the lo-byte;
        sta zp_overflow+LO      ; the overflow word will be $0000 or $0001
        rts

        ; word for either:
        ;-----------------------------------------------------------------------
        ; if the first integer was a word, the result will always be a word.
        ; if the 2nd integer is a byte, extend it to a word to hold the result
        ; (if the top of the stack is already a word, no change will happen)
        ;
@word:  jsr term_extend

        pla                     ; retrieve our first integer's lo-byte
        clc                     
        adc zp_stack, x         ; add lo-bytes together
        tay                     ; Y still holds the hi-byte from the pop
        adc zp_stack+1, x       ; add-with-carry the hi-bytes

        ; handle the carry:
        ; (duplicate of above, for speed)
        ;
        ; even adding two words can only overflow 1-bit at most,
        ; so the hi-byte of the overflow word will always be zero
        lda # 0
        sta zp_overflow+HI
        rol                     ; add the carry to zero for the lo-byte;
        sta zp_overflow+LO      ; the overflow word will be $0000 or $0001
        rts


; +1 ( i -- i )
;===============================================================================
; add one to the integer atop the stack:
; TODO: also capture overflow
;-------------------------------------------------------------------------------
        .term   "+1"

term_add1:
        ;-----------------------------------------------------------------------
        lda zp_type, x
        bmi @word
        beq @byte

        ; a token type, including a stack underflow
        jmp err_type

        ;-----------------------------------------------------------------------
@word:  inc zp_stack, x
        bne +
        inc zp_stack+1, x
+       rts

@byte:  inc zp_stack, x
        rts


; - ( i i -- i )
;===============================================================================
; subtract the top two integers on the stack from each other, returning
; a single integer. the size of the return integer will be:
;
;       byte - byte     = byte
;       byte - word     = word
;       word - byte     = word
;       word - word     = word
;
; in all instances, any underflow will go into the `overflow` variable
;-------------------------------------------------------------------------------
        .term   "-"

term_sub:
        ;-----------------------------------------------------------------------
        jsr pop_int             ; pop the top integer, regardless of type
        pha                     ; keep a hold of the byte/lo-byte
        bcs @word               ; the carry will be 0 = byte, 1 = word

        ;-----------------------------------------------------------------------
        ; if the first integer was a byte, then check the type of the second
        ; (we won't pop it, rather just rewrite the top of the stack)
        ;
@byte:  lda zp_type, x
        ; if either parameter is a word,
        ; then the output is always a word
        bne @word

        ; byte - byte:
        ;-----------------------------------------------------------------------
        ; the top of the stack is already
        ; a byte, so no need to push or extend
        ;
        pla                     ; restore the first integer
        sec                     ; (logically, the cary is currently unset)
        sbc zp_stack, x         ; subtract the second
        
        ; handle the carry:
        ;
        ; since subtracting can only underflow by a maximum of one bit,
        ; any carry (underflow) would always result in -1 (all 1s) for
        ; the upper word in a 32-bit long (our `overflow` variable)
        ; 
        lda # 0
        sbc # 0
        sta zp_overflow+LO
        lda zp_overflow+HI
        sbc # 0
        sta zp_overflow+HI
        rts

        ; word for either:
        ;-----------------------------------------------------------------------
        ; if the first integer was a word, the result will always be a word.
        ; if the 2nd integer is a byte, extend it to a word to hold the result
        ; (if the top of the stack is already a word, no change will happen)
        ;
@word:  jsr term_extend

        pla                     ; retrieve our first integer's lo-byte
        sbc zp_stack, x         ; subtract lo-bytes from each other
        tay                     ; Y still holds the hi-byte from the pop
        sbc zp_stack+1, x       ; subtract-with-carry the hi-bytes
        
        ; handle the carry:
        ;
        ; since subtracting can only underflow by a maximum of one bit,
        ; any carry (underflow) would always result in -1 (all 1s) for
        ; the upper word in a 32-bit long (our `overflow` variable)
        ; 
        lda # 0
        sbc # 0
        sta zp_overflow+LO
        lda zp_overflow+HI
        sbc # 0
        sta zp_overflow+HI
        rts


; -1 ( i -- i )
;===============================================================================
; subtract one from the integer atop the stack:
; TODO: also capture overflow
;-------------------------------------------------------------------------------
        .term   "-1"

term_sub1:
        ;-----------------------------------------------------------------------
        lda zp_type, x
        bmi @word
        beq @byte

        ; a token type, including a stack underflow
        jmp err_type

        ;-----------------------------------------------------------------------
@word:  dec zp_stack, x
        bpl +
        dec zp_stack+1, x
+       rts

@byte:  dec zp_stack, x
        rts


; neg ( i -- i )
;===============================================================================
; negates the integer atop the stack:
;
; in:   int     integer, original
; out:  int     integer, negated (two's-compliment)
;
;-------------------------------------------------------------------------------
        .term   "neg"

term_neg:
        ;-----------------------------------------------------------------------
        ; read the data-type of the item atop the stack
        lda zp_type, x
        bmi @word
        beq @byte

        ; a token type, including a stack underflow
        jmp err_type

        ; as an optimisation, don't redo the data-type checks:
        ;-----------------------------------------------------------------------
@word:  jsr term_not@word
        jmp term_add1@word
        ;-----------------------------------------------------------------------
@byte:  jsr term_not@byte
        jmp term_add1@byte


; not ( i -- i )
;===============================================================================
; flips all the bits of the integer atop the stack:
;
; in:   int     integer, original
; out:  int     integer, bits flipped
;
;-------------------------------------------------------------------------------
        .term   "not"

term_not:
        ;-----------------------------------------------------------------------
        ; read the data-type of the item atop the stack
        lda zp_type, x
        bmi @word
        beq @byte

        ; a token type, including a stack underflow
        jmp err_type

        ;-----------------------------------------------------------------------
@word:  lda zp_stack+1, x
        eor # %11111111         ; flip the hi-byte,
        sta zp_stack+1, x       ; and drop through to...

@byte:  lda zp_stack, x
        eor # %11111111         ; flip the lo-byte
        sta zp_stack, x
        
        rts