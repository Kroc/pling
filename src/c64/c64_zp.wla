; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; c64_zp.wla : Pling zero-page layout for C64
;===============================================================================
; if we want to make use of the built in functions of the KERNAL, we have
; to pick our zero-page locations very, very carefully. finding enough
; contiguous space for the stacks is the most difficult, so we do not
; rely upon any auto-numbering to pick zero-page addresses for us
;
;-------------------------------------------------------------------------------
; a temporary address available for indirect addressing
.DEF    zp_addr         $03
; a temporary value available for conversions
.DEF    zp_temp         $05
.DEF    zp_temp1        $05
.DEF    zp_temp2        $06
; likewise, but for the output value
.DEF    zp_word         $07
; overflow for word*word calculations
.DEF    zp_overflow     $09

; address of the last defined term
; (updated when new terms are added)
.DEF    zp_last         $0b

; the address of the next free byte of memory in user-space.
; this is where new terms are compiled
.DEF    zp_here         $0d

; number base (2, 10, 16) used during number parsing
.DEF    zp_int_base     $0f

;-------------------------------------------------------------------------------
; Pling's data stack works downwards; this direction was chosen specifically
; so that the low byte of a word appears top-most on the stack, yet at the
; same time the bytes are in little-Endian order, allowing for vectored jumps
;
;                    direction of stack <--- | ---> direction of RAM
;     +--------------------------------------+
;     |                              $34 $12 | < little-Endian words on stack
;     +--------------------------------------+
;     ^ bottom of stack         top of stack ^  
;
; Pling's stack index is pre-inc/decrement, and not post-inc/decrement like
; the C64's hardware stack. this means that Pling's stack index points to
; the *currently active* cell, unlike the C64 which moves the stack index
; to an *unused* cell
;
; number of bytes in the data stack: note that this also implies
; the same number of bytes for the data-type stack to match
.DEF    PL_STACK_SIZE   64
.DEF    zp_stack        $10                                         ;=$10..$50
.DEF    zp_type_und     $50
.DEF    zp_type         $51                                         ;=$51..$91
.DEF    zp_type_ovr     $91

; current delimiter between terms
.DEF    zp_delimiter    $033b

; string buffer for term names
.DEF    PL_TERM_LEN     31
.DEF    zp_term_name    $033c

; active device number (system-dependent);
; this is the same ZP byte used by the KERNAL
; to store the last-used device number
;
.DEF    zp_device       ZP_KERNAL_DEV                               ;=$BA
