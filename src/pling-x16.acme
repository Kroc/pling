!source "x16\x16.acme"

;===============================================================================
!addr   {

; for speed, the parameter stack uses the zero-page
; and works downwards from $80 to $00
;
pl_stack                = $80

; TODO: data types?
;
;pl_type                 = $40
;
; %?-------     = 0: lo, 1: hi
; %?0000000     = value (lo / hi) 
; %?1000000     = address (lo / hi)

; without X16 BASIC, we have $A9..$FF available
; and we use this for any other zero-page related
; space required by Pling
;
pl_zp                   = $a9   ; base address
;-------------------------------------------------------------------------------
; index used for the input buffer(s); 2-bytes
;
pl_buffer_index         = pl_zp+0
pl_buffer_index_lo      = pl_zp+0
pl_buffer_index_hi      = pl_zp+1

; address of the input buffer; 2-bytes
; -- during interactive input this will be the 80-char line-buffer at $0200
;
pl_buffer_addr          = pl_zp+2
pl_buffer_addr_lo       = pl_zp+2
pl_buffer_addr_hi       = pl_zp+3

; 32 char buffer; the first byte is the term name length
pl_buffer_term          = pl_zp+4

; contains the address of the last defined term
; (updated when new terms are added)
pl_last                 = $fc
pl_last_lo              = $fc
pl_last_hi              = $fd

; contains the address of the next free byte of memory
; (used when compiling)
pl_here                 = $fe
pl_here_lo              = $fe
pl_here_hi              = $ff

; the 80-char line-input buffer used by the X16 KERNAL
; (it's actually 81 bytes to allow for a final terminator)
;
pl_buffer_line          = $200

}

;===============================================================================
!source "boot_basic.acme"

;===============================================================================
; take control of the machine...
;
init:
        ;-----------------------------------------------------------------------
        stz x16_via1+0

        jsr .kernal_primm
        !pet    $d, "pling!", $d, $d, 0

        lda #< init_here
        sta pl_here_lo
        lda #> init_here
        sta pl_here_hi

        lda #< last_term
        sta pl_last_lo
        lda #> last_term
        sta pl_last_hi

        jsr input

        jmp *

; pre-compiled terminology:
;===============================================================================
!source "terms.acme"

init_here:
last_term = .prev_term