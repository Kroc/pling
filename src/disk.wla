; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; disk.wla : disk I/O, load & save
;===============================================================================

; chain ( w -- )
;===============================================================================
; loads, and executes, the file-name string address on the stack
;
;-------------------------------------------------------------------------------
        .term   "chain"

term_io_chain:
        ;-----------------------------------------------------------------------
        ; put the string address aside
        jsr pop_word
        sta zp_addr+LO
        sty zp_addr+HI
        jsr pop_byte            ; get the string-length
        sta zp_jmp              ; (put aside)

        ; backup Pling's stack pointer
        .phx

        ; prepare for loading
        ; TODO: use a variable for current dev#
        ;
        ldx ZP_KERNAL_DEV       ; last-used KERNAL device number
        bne +                   ; not 0? good
        ldx # DEV_DRV8          ; default to drive 8
+       ldy # $00               ; do not use PRG load-address
        tya                     ; logical file number
        jsr KERNAL_SETLFS

        ldx zp_addr+LO
        ldy zp_addr+HI
        lda zp_jmp              ; A is string-length
        jsr KERNAL_SETNAM       ; set KERNAL file name

        lda # $00               ; load, not verify
        ldx #< pl_disk
        ldy #> pl_disk
        jsr KERNAL_LOAD

        bcc +
        kil
+       
        ; TODO: error handling
        ; add a null-terminator after the file!
        stx zp_addr+LO
        sty zp_addr+HI
        ldy # 1
        lda # 0
        sta [zp_addr], y

        ; restore stack position
        .plx
        rts

; open-read ( w -- h | e )
;===============================================================================
; open a file on the currently active storage device for reading
;
; out:  handle  a stream handle is returned. read `<` from the stream handle
;               to read from the opened file
;
;  or:  error   if the file could not be opened for reading,
;               an error code is returned instead   
;
;-------------------------------------------------------------------------------
        