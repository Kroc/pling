; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
;===============================================================================

; BASIC programs starting address
.DEFINE basic_start     $0801
; BASIC/KERNAL input buffer
.DEFINE input_buffer    $0200

; these vectors are called by hardware events, independent of the KERNAL.
; when the KERNAL ROM is enabled the ROM provides the values, which are KERNAL
; addresses, to allow normal operation of the C64. if the KERNAL ROM is
; switched off, then the vectors will be defined by the RAM underneath
; -- if the vectors in RAM are not set the system will crash!
;
.DEFINE HW_VECTOR_NMI   $fffa   ; Non-Maskable-Interrupt vector
.DEFINE HW_VECTOR_RESET $fffc   ; cold-reset vector
.DEFINE HW_VECTOR_IRQ   $fffe   ; interrupt vector

}

; device numbers:
;-------------------------------------------------------------------------------
; some KERNAL routines ask for device numbers
;
.ENUMID                 0
.ENUMID DEV_KEY         ; 0  : keyboard
.ENUMID DEV_TAPE        ; 1  : datasette
.ENUMID DEV_RS232       ; 2  : RS232 serial port
.ENUMID DEV_SCR         ; 3  : the screen
.ENUMID DEV_LPT1        ; 4  : first printer
.ENUMID DEV_LPT2        ; 5  : second printer
.ENUMID DEV_PLOT1       ; 6  : first plotter
.ENUMID DEV_PLOT2       ; 7  : second plotter
.ENUMID DEV_DRV8        ; 8  : disk drive "8"
.ENUMID DEV_DRV9        ; 9  : disk drive "9"
.ENUMID DEV_DRV10       ; 10 : ...
.ENUMID DEV_DRV11       ; 11 : ...
.ENUMID DEV_DRV12       ; 12 : ...
.ENUMID DEV_DRV13       ; 13 : ...
.ENUMID DEV_DRV14       ; 14 : ...
.ENUMID DEV_DRV15       ; 15 : drives above 15 are extremely rare

; zero-page addresss used by the KERNAL
.DEFINE ZP_KERNAL_DEV   $ba     ; last-used device, e.g. drive 8

; KERNAL vectors:
;-------------------------------------------------------------------------------
; the C64 allows hijacking of the ROM routines via a number of vectors in RAM
; that the user can change to their own routines
.ENUM   $0314

; vector for the interrupt routine.
; default value is $EA31
KERNAL_VECTOR_IRQ       WORD    ;=$0314

; vector for `BRK` instruction interrupt.
; default value is $FE66
KERNAL_VECTOR_BRK       WORD    ;=$0316

; vector for the KERNAL's handling of the Non-Maskable Interrupt; note that
; the hardware vector (below) is executed first, which points into the KERNAL
; by default. this vector only hijacks the NMI when the KERNAL ROM is on.
; if you want to bypass the KERNAL, set the hardware vector directly.
; default value is $FE47
KERNAL_VECTOR_NMI       WORD    ;=$0318

; vector for the KERNAL's `OPEN` routine.
; default value is $F34A
KERNAL_VECTOR_OPEN      WORD    ;=$031a

; vector for the KERNAL's `CLOSE` routine.
; default value is $F291
KERNAL_VECTOR_CLOSE     WORD    ;=$031c

; vector for the KERNAL's `CHKIN` routine.
; default value is $F20E
KERNAL_VECTOR_CHKIN     WORD    ;=$031e

; vector for the KERNAL's `CHKOUT` routine.
; default value is $F250
KERNAL_VECTOR_CHKOUT    WORD    ;=$0320

; vector for the KERNAL's `CLRCHN` routine.
; default value is $F333
KERNAL_VECTOR_CLRCHN    WORD    ;=$0322

; vector for the KERNAL's `CHRIN` routine.
; default value is $F157
KERNAL_VECTOR_CHRIN     WORD    ;=$0324

; vector for the KERNAL's `CHROUT` routine.
; default value is $F1CA
KERNAL_VECTOR_CHROUT    WORD    ;=$0326

; vector for the KERNAL's `STOP` routine.
; default value is $F6ED
KERNAL_VECTOR_STOP      WORD    ;=$0328

; vector for the KERNAL's `GETIN` routine.
; default value is $F13E
KERNAL_VECTOR_GETIN     WORD    ;=$032a

; vector for the KERNAL's `CLALL` routine.
; default value is $F32F
KERNAL_VECTOR_CLALL     WORD    ;=$032c

; an unused vector, default value is $FE66
KERNAL_VECTOR_UNUSED    WORD    ;=$032e

; vector for the KERNAL's `LOAD` routine.
; default value is $F4A5
KERNAL_VECTOR_LOAD      WORD    ;=$0330

; vector for the KERNAL's `SAVE` routine.
; default value is $F5ED
KERNAL_VECTOR_SAVE      WORD    ;=$0332

.ENDE

; KERNAL routines:
;-------------------------------------------------------------------------------

; initialize VIC; restore default input/output to keyboard/screen;
; clear screen; set PAL/NTSC switch and interrupt timer
;
.DEFINE KERNAL_SCINIT           $ff81
.DEFINE KERNAL_SCINIT_ADDR      $ff5b

; initialize CIA's, SID volume; setup memory configuration;
; set and start interrupt timer
;
.DEFINE KERNAL_IOINIT           $ff84
.DEFINE KERNAL_IOINIT_ADDR      $fda3

; clear memory addresses $0002-$0101 and $0200-$03FF; run memory test
; and set start and end address of BASIC work area accordingly;
; set screen memory to $0400 and datasette buffer to $033C
;
.DEFINE KERNAL_RAMTAS           $ff87
.DEFINE KERNAL_RAMTAS_ADDR      $fd50

; fill vector table at memory addresses $0314-$0333 with default values
;
.DEFINE KERNAL_RESTOR           $ff8a
.DEFINE KERNAL_RESTOR_ADDR      $fd15

; copy vector table at memory addresses $0314-$0333 from or into user table.
; input:
;       carry : 0 = copy user table into vector table
;               1 = copy vector table into user table
;         X/Y : pointer to user table
;
.DEFINE KERNAL_VECTOR           $ff8d
.DEFINE KERNAL_VECTOR_ADDR      $fd1a

; set system error display switch at memory address $009D
; input:
;       A : switch value
;
.DEFINE KERNAL_SETMSG           $ff90
.DEFINE KERNAL_SETMSG_ADDR      $fe18

; send `LISTEN` secondary address to serial bus.
; (must call `LISTEN` beforehand)
; input:
;       A : secondary address.
;
.DEFINE KERNAL_LSTNSA           $ff93
.DEFINE KERNAL_LSTNSA_ADDR      $edb9

; send `TALK` secondary address to serial bus.
; (must call `TALK` beforehand)
; input:
;       A : secondary address
;
.DEFINE KERNAL_TALKSA           $ff96
.DEFINE KERANL_TALKSA_ADDR      $ecd7

; save or restore start address of BASIC work area
; input:
;       carry : 0 = restore from input
;               1 = save to output
;         X/Y : address (if carry = 0)
; output:
;         X/Y : address (if carry = 1)
;
.DEFINE KERNAL_MEMBOT           $ff99
.DEFINE KERNAL_MEMBOT_ADDR      $fe25

; save or restore end address of BASIC work area
; input:
;       carry : 0 = restore from input
;               1 = Save to output
;         X/Y : address (if carry = 0)
; output:
;         X/Y : address (if carry = 1)
;
.DEFINE KERNAL_MEMTOP           $ff9c
.DEFINE KERNAL_MEMTOP_ADDR      $fe34

; query keyboard; put current matrix code into memory address $00CB,
; current status of shift keys into memory address $028D and PETSCII
; code into keyboard buffer
.DEFINE KERNAL_SCNKEY           $ff9f
.DEFINE KERNAL_SCNKEY_ADDR      $ea87

; unknown. (set serial bus timeout)
; input:
;       A : timeout value
;
.DEFINE KERNAL_SETTMO           $ffa2
.DEFINE KERNAL_SETTMO_ADDR      $fe21

; read byte from serial bus.
; (must call `TALK` and `TALKSA` beforehand)
; output:
;       A : byte read
;
.DEFINE KERNAL_IECIN            $ffa5
.DEFINE KERNAL_IECIN_ADDR       $ee13

; write byte to serial bus.
; (must call `LISTEN` and `LSTNSA` beforehand)
; input:
;       A : byte to write
;
.DEFINE KERNAL_IECOUT           $ffa8
.DEFINE KERNAL_IECOUT_ADDR      $eddd

; send `UNTALK` command to serial bus
.DEFINE KERNAL_UNTALK           $ffab
.DEFINE KERNAL_UNTALK_ADDR      $edef

; send `UNLISTEN` command to serial bus
.DEFINE KERNAL_UNLSTN           $ffae
.DEFINE KERNAL_UNLSTN_ADDR      $edfe

; send `LISTEN` command to serial bus
; input:
;       A : device number
;
.DEFINE KERNAL_LISTEN           $ffb1
.DEFINE KERNAL_LISTEN_ADDR      $ed0c

; send `TALK` command to serial bus
; input:
;       A : device number
;
.DEFINE KERNAL_TALK             $ffb4
.DEFINE KERNAL_TALK_ADDR        $ed09

; fetch status of current input/output device, value of `ST` variable
; (for RS232, status is cleared)
; output:
;       A : device status
;
.DEFINE KERNAL_READST           $ffb7
.DEFINE KERNAL_READST_ADDR      $fe07

; set file parameters
; input:
;       A : logical number
;       X : device number
;       Y : secondary address
;
.DEFINE KERNAL_SETLFS           $ffba
.DEFINE KERNAL_SETLFS_ADDR      $fe00

; set file name parameters
; input:
;         A : file name length
;       X/Y : pointer to file name
;
.DEFINE KERNAL_SETNAM           $ffbd
.DEFINE KERNAL_SETNAM_ADDR      $fdf9

; open file (must call `SETLFS` and `SETNAM` beforehand)
.DEFINE KERNAL_OPEN             $ffc0
.DEFINE KERNAL_OPEN_ADDR        $f34a

; close file
; input:
;       A : logical number
;
.DEFINE KERNAL_CLOSE            $ffc3
.DEFINE KERNAL_CLOSE_ADDR       $f291

; define file as default input
; (must call `OPEN` beforehand)
; input:
;       X : logical number
;
.DEFINE KERNAL_CHKIN            $ffc6
.DEFINE KERNAL_CHKIN_ADDR       $f20e

; define file as default output
; (must call `OPEN` beforehand)
; input:
;       X : logical number
;
.DEFINE KERNAL_CHKOUT           $ffc9
.DEFINE KERNAL_CHKOUT_ADDR      $f250

; close default input/output files (for serial bus, send `UNTALK` and/or
; `UNLISTEN`); restore default input/output to keyboard/screen
.DEFINE KERNAL_CLRCHN           $ffcc
.DEFINE KERNAL_CLRCHN_ADDR      $f333

; read byte from default input (for keyboard, read a line from the screen).
; (if not keyboard, must call `OPEN` and `CHKIN` beforehand)
; output:
;       A : byte read
;
.DEFINE KERNAL_CHRIN            $ffcf
.DEFINE KERNAL_CHRIN_ADDR       $f157

; write byte to default output
; (if not screen, must call `OPEN` and `CHKOUT` beforehand)
; input:
;       A : byte to write
;
.DEFINE KERNAL_CHROUT           $ffd2
.DEFINE KERNAL_CHROUT_ADDR      $f1ca

; load or verify file. (must call `SETLFS` and `SETNAM` beforehand)
; input:
;           A : 0 = load, 1-255 = verify;
;         X/Y : load address (if secondary address = 0)
; output:
;       carry : 0 = no errors, 1 = error
;           A : KERNAL error code (if carry = 1)
;         X/Y : address of last byte loaded/verified (if carry = 0)
;
.DEFINE KERNAL_LOAD             $ffd5
.DEFINE KERNAL_LOAD_ADDR        $f49e

; save file. (must call `SETLFS` and `SETNAM` beforehand)
; input:
;           A : address of zero page register holding
;               start address of memory area to save
;         X/Y : End address of memory area plus 1.
; output:
;       carry : 0 = No errors, 1 = Error
;           A : KERNAL error code (if carry = 1)
;
.DEFINE KERNAL_SAVE             $ffd8
.DEFINE KERNAL_SAVE_ADDR        $f5dd

; set Time of Day, at memory address $00A0-$00A2
; input:
;       A/X/Y : new TOD value
;
.DEFINE KERNAL_SETTIM           $ffdb
.DEFINE KERNAL_SETTIM_ADDR      $f6e4

; read Time of Day, at memory address $00A0-$00A2
; output:
;       A/X/Y : current TOD value
;
.DEFINE KERNAL_RDTIM            $ffde
.DEFINE KERNAL_RDTIM_ADDR       $f6dd

; query Stop key indicator, at memory address $0091;
; if pressed, call CLRCHN and clear keyboard buffer
; output:
;        zero : 0 = not pressed, 1 = pressed
;       carry : 1 = pressed
;
.DEFINE KERNAL_STOP             $ffe1
.DEFINE KERNAL_STOP_ADDR        $f6ed

; read byte from default input
; (if not keyboard, must call `OPEN` and `CHKIN` beforehand)
; output:
;       A : byte read
;
.DEFINE KERNAL_GETIN            $ffe4
.DEFINE KERNAL_GETIN_ADDR       $f13e

; clear file table; call `CLRCHN`
.DEFINE KERNAL_CLALL            $ffe7
.DEFINE KERNAL_CLALL_ADDR       $f32f

; update Time of Day, at memory address $00A0-$00A2,
; and stop-key indicator, at memory address $0091
.DEFINE KERNAL_UDTIM            $ffea
.DEFINE KERNAL_UDTIM_ADDR       $f69b

; fetch number of screen rows and columns
; output:
;       X : number of columns (40)
;       Y : number of rows (25)
;
.DEFINE KERNAL_SCREEN           $ffed
.DEFINE KERNAL_SCREEN_ADDR      $e505

; save or restore cursor position
; input:
;       carry : 0 = restore from input, 1 = save to output
;           X : cursor column (if carry = 0)
;           Y : cursor row (if carry = 0)
; output:
;           X : cursor column (if carry = 1)
;           Y : cursor row (if carry = 1)
;
.DEFINE KERNAL_PLOT             $fff0
.DEFINE KERNAL_PLOT_ADDR        $e50a

; fetch CIA1 base address
; output:
;       X/Y : CIA1 base address ($DC00)
;
.DEFINE KERNAL_IOBASE           $fff3
.DEFINE KERNAL_IOBASE_ADDR      $e500
