; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; c64_zp.acme : Pling zero-page layout for C64
;===============================================================================

; Pling's data stack works downwards; this direction was chosen specifically
; so that the low byte of a word appears top-most on the stack, yet at the
; same time the bytes are in little-Endian order, allowing for vectored jumps
;
; TODO: may have to move due to KERNAL zp-usage?
;

.RAMSECTION "stack"     SLOT 0  ALIGN $10
        zp_type_bottom  DSB 64
        zp_type        .DSB 64
        zp_stack_bottom DSB 64
        zp_stack       .DSB 64
.ENDS

.RAMSECTION "core"      SLOT 0
        ; used for indirect jumps
        ; when executing terms
        zp_jmp          WORD
        
        ; address of the last defined term
        ; (updated when new terms are added)
        zp_last         WORD
        ; the address of the next free byte of memory
        zp_here         WORD
.ENDS

.RAMSECTION "console"   SLOT 0
        ; console cursor position
        zp_crsr_col     BYTE
        zp_crsr_row     BYTE
        ; current screen-RAM address of the cursor;
        ; this is where the next character will be written
        zp_crsr_addr    WORD
        ; text colour of the cursor
        ; (what colour is used when printing new characters)
        zp_crsr_colour  BYTE
.ENDS