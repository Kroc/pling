; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; terms_nucleus.wla
;===============================================================================
; these are the absolute bear minimum of words that *have* to be implemented
; in native assembly language in order to port the rest of Pling

; emit ( b -- )
;===============================================================================
; TODO: this implementation is temporary
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   4, "emit"
term_emit:

        jsr pop
        jsr KERNAL_CHROUT
        rts

; ! ( b w -- )
;===============================================================================
; pokes the byte atop the stack into the address below.
; all items are consumed
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   1, "!"
term_set:
        lda zp_stack+2, x       ; get value to store (3rd byte)
        sta [zp_stack, x]       ; store via the address on the stack

        inx                     ; consume...
        inx                     ; three...
        inx                     ; bytes

        rts

; @ ( w -- b )
;===============================================================================
; peeks a byte from the address on the stack, (consuming the address)
; and pushes the value to the stack
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   1, "@"
term_get:
        lda [zp_stack, x]
        inx
        sta zp_stack, x

        rts

; drop ( x -- )
;===============================================================================
; forget the top-most item on the stack, moving the stack down
; to the next item
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   4, "drop"
term_drop:
        ; is the top-most item a byte or a word?
        lda zp_type, x
        beq +
        inx                     ; drop word
+       inx                     ; drop byte
        rts

; execute ( w -- )
;===============================================================================
; execute the address on top of the stack
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   4, "exec"
term_exec:
.IFDEF  CPU_65C02
        ; we must reduce the stack by 2 bytes *before* we jump!
        inx
        inx
        ; 65C02: do a jump directly from the data stack,
        ; with +2 to compensate for already having popped the stack
        jmp [zp_stack+2, x]

.ELSE   ; 6502:
        lda zp_stack, x
        sta zp_jmp+hi
        inx
        lda zp_stack, x
        sta zp_jmp+lo
        inx
        jmp [zp_jmp]
.ENDIF