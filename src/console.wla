; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; console.wla
;===============================================================================

; ?con.cols ( -- b )
;===============================================================================
; gets the number of console columns, minus 1 (i.e. zero-based);
; note that some systems can change screen size!
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   9, "?con.cols"
term_peek_con_cols:

        .IFDEF  SYSTEM_C64
                lda # 39
                jmp push_byte
        .ELSE
                .FAIL
        .ENDIF
        rts

; ?con.rows ( -- b )
;===============================================================================
; gets the current number of console rows, minus 1 (i.e. zero-based);
; note that some systems can change screen size!
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   9, "?con.rows"
term_peek_con_rows:

        .IFDEF  SYSTEM_C64
                lda # 24
                jmp push_byte
        .ELSE
                .FAIL
        .ENDIF
        rts

; ?con.back ( -- b )
;===============================================================================
; gets the console background colour. the return value is machine-dependent;
; Pling makes no effort to normalise colour across systems
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   9, "?con.back"
term_peek_con_back:

        .IFDEF  SYSTEM_C64
                lda VIC_BACKGROUND
                inx
                sta zp_stack, x
                lda # TYPE_BYTE
                sta zp_type, x
        .ELSE
                .FAIL
        .ENDIF
        rts

; !con.back ( b -- )
;===============================================================================
; sets the console background colour. the value used is machine-dependent;
; Pling makes no effort to normalise colour across systems
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   9, "!con.back"
term_poke_con_back:

        .IFDEF  SYSTEM_C64
                lda zp_stack, x
                sta VIC_BORDER
                sta VIC_BACKGROUND
                dex
        .ELSE
                .FAIL
        .ENDIF
        rts

; con.home ( -- )
;===============================================================================
; homes the cursor -- moves it back to row/col 0
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   8, "con.home"
term_con_home:

        lda # 0
        sta zp_crsr_col
        sta zp_crsr_row
        rts

; con.clear ( -- )
;===============================================================================
; clears the console
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   9, "con.clear"
term_con_clear:

        ; swtich on I/O
        lda CPU_CONTROL
        pha
        lda # %00110111
        sta CPU_CONTROL

        ; clear with space char
        lda # $20

        ; write four 256-byte strips simultaneously
        ; so we don't have to deal with nested loops
        ldy # $00
-       sta $d800 + $000, y
        sta $d800 + $100, y
        sta $d800 + $200, y
        sta $d800 + $300, y
        dey
        bne -
        
-       sta pl_screen + $000, y
        sta pl_screen + $100, y
        sta pl_screen + $200, y
        sta pl_screen + $300, y
        dey
        bne -

        ; home the cursor
        jsr term_con_home

        pla
        sta CPU_CONTROL

        rts

; >con ( b -- )
;===============================================================================
; writes a byte to the console, advancing the cursor
; and scrolling if necessary
;
;-------------------------------------------------------------------------------
        _prevTerm
        .BYTE   4, ">con"
term_write_con:

        jsr pop
        ; TODO: error if data-type is word