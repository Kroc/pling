; Pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; stack.wla : Pling's software-defined stack implementation
;===============================================================================
; data-types:
;-------------------------------------------------------------------------------
.DEF    TYPE_BYTE       %00000000       ; a data byte, but not a token!
.DEF    TYPE_WORD_LO    %10000000       ; the lo-byte of a word
.DEF    TYPE_WORD_HI    %10000001       ; the hi-byte of a word

; tokens:
;-------------------------------------------------------------------------------
; tokens are implementation-specific, opaque data types for differentiating
; error/token numbers from regular bytes/words on the stack. tokens are never
; directly exposed to Pling programs as the type-values of tokens are not
; guaranteed to be constant, or even exist, between systems/implementations 
;
.ENUMID 1

; unlike other types of errors, stack under/overflow cannot be caught and
; handled after happening; a stack underflow represents a critical program
; logic error and the program cannot continue. if we were to push an error
; token on the stack upon underflow, this would just pass the error down
; the call chain, making it difficult to ascertain where the underflow
; occurred. a stack overflow would, naturally, leave no room to push an
; error token!
;
.ENUMID TOKEN_STK

.ENUMID TOKEN_EOD       ; "End Of Data" (read / write)
.ENUMID ERROR_TYPE      ; data-type error
.ENUMID ERROR_PARSE     ; parsing error

; stack RAM:
;-------------------------------------------------------------------------------
; Pling's data stack works downwards; this direction was chosen specifically
; so that the low byte of a word appears top-most on the stack, yet at the
; same time the bytes are in little-Endian order, allowing for vectored jumps
;
;                    direction of stack <--- | ---> direction of RAM
;     +--------------------------------------+
;     |                              $34 $12 | < little-Endian words on stack
;     +--------------------------------------+
;     ^ bottom of stack         top of stack ^  
;
; Pling's stack index is pre-inc/decrement, and not post-inc/decrement like
; the C64's hardware stack. this means that Pling's stack index points to
; the *currently active* cell, unlike the C64 which moves the stack index
; to an *unused* cell
;
; number of bytes in the data stack: note that this also implies
; the same number of bytes for the data-type stack to match
.DEF    PL_STACK_SIZE   64

.RAMSECTION "PL_STACK"  SLOT $00        RETURNORG
        ;-----------------------------------------------------------------------
        zp_stack        DSB PL_STACK_SIZE
.ENDS

.RAMSECTION "PL_TYPE"   SLOT $00        RETURNORG
        ;-----------------------------------------------------------------------
        zp_type_und     BYTE
        zp_type         DSB PL_STACK_SIZE
        zp_type_ovr     BYTE
.ENDS


; lower the stack
;===============================================================================
; this lowers the stack, checking for overflow, but does not change any data.
; the direction the stack moves is implementation specific and never exposed
; to Pling scripts
;
.MACRO  .lowerStack
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        dex
        bpl @\.__\@
        jmp err_stack_overflow

@\.__\@:
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.ENDM

; lower the stack twice, using one
; error check for efficiency
;-------------------------------------------------------------------------------
.MACRO  .lowerStack2
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        dex
        dex
        bpl @\.__\@
        jmp err_stack_overflow

@\.__\@:
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.ENDM

; raise the stack
;===============================================================================
; this raises the stack, checking for underflow, but does not change any data.
; the direction the stack moves is implementation specific and never exposed
; to Pling scripts
;
.MACRO  .raiseStack
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        inx
        ; note that raising the stack to the empty position is okay,
        ; therefore what we are checking for is raising above empty
        cpx # PL_STACK_SIZE+1
        bcc @\.__\@
        jmp err_stack_underflow

@\.__\@:
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.ENDM

; raise the stack twice, using one error check for efficiency
;-------------------------------------------------------------------------------
.MACRO  .raiseStack2
        ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        inx
        inx
        ; note that raising the stack to the empty position is okay,
        ; therefore what we are checking for is raising above empty
        cpx # PL_STACK_SIZE+1
        bcc @\.__\@
        jmp err_stack_underflow

@\.__\@:
        ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.ENDM


push_byte:
;===============================================================================
; push a byte onto the data stack,
; setting the data-type too
;
; in:   A       value
;       X       stack index
;
; out:  X       stack index, updated
;       Y       (preserved)
;       A       (clobbered)
;
;-------------------------------------------------------------------------------
        dex                     ; push stack down,
        bmi err_stack_overflow  ; check for overflow
        sta zp_stack, x         ; set the byte value

        ; set the data-type:
.IFDEF  CPU_65C02
        ; this 65C02 optimisation relies upon `TYPE_BYTE` being zero...
        ; sanity check this in case of unintended change in the future
        .IF TYPE_BYTE != 0
                .PRINT "TYPE_BYTE is not 0!"
                .FAIL
        .ENDIF
        stz zp_type, x
.ELSE   ;6502
        lda # TYPE_BYTE
        sta zp_type, x
.ENDIF
        rts


push_word:
;===============================================================================
; push a word onto the data stack,
; setting the data type too
;
; in:   A       value, lo-byte
;       Y       value, hi-byte
;       X       stack index
;
; out:  X       stack index, updated
;       A, Y    (clobbered)
;
;-------------------------------------------------------------------------------
        dex                     ; push stack down,
        dex                     ; twice
        bmi err_stack_overflow  ; check for overflow

        ; write the lo-byte first,
        ; at the new top-most position
        sta zp_stack+0, x
        ; write the hi-byte underneath that
        sty zp_stack+1, x
        ; note the fall-through to the next routine...

set_type_word:
;-------------------------------------------------------------------------------
; sets the data-type for the top two bytes on the stack to a word.
; this is an internal tail-call, no validation is done at all
;
; out:  A       (clobbered)
;       X, Y    (preserved)
;
;-------------------------------------------------------------------------------
.IFDEF  CPU_65C02
        ; this optimisation relies on `TYPE_WORD_HI` being `TYPE_WORD_LO` + 1;
        ; we sanity-check this assumption in case of unexpected change
        .IF TYPE_WORD_HI != TYPE_WORD_LO+1
                .PRINT "TYPE_WORD_HI != TYPE_WORD_LO+1"
                .FAIL
        .ENDIF

        lda # TYPE_WORD_LO
        sta zp_type+0, x
        inc                     ; saves 1-byte
        sta zp_type+1, x
.ELSE   ;6502
        lda # TYPE_WORD_LO
        sta zp_type+0, x
        lda # TYPE_WORD_HI
        sta zp_type+1, x
.ENDIF
        rts


push_token:
;===============================================================================
; pushes a token to the stack:
;
; in:   X       stack index
;       A       token's value (what goes on the data-stack)
;       Y       the token type (what goes on the type-stack)
;
; out:  X       stack index, updated
;       A, Y    (clobbered)
;
;-------------------------------------------------------------------------------
        dex                     ; lower the stack
        bmi err_stack_underflow ; if underflow, error

        ; define the token!
        sta zp_stack, x
        sty zp_type, x
        rts

; a stack over/under-flow error:
; (we detect which here)
;
err_stack:
        ;-----------------------------------------------------------------------
        ; transferring X (stack index) to A
        ; gives us a bit-check for free (zero/sign)
        txa
        ; since the stack index works backwards (for this implementation),
        ; the very bottom of the stack will be index 0. if the stack index
        ; has gone negative, we have overflow
        bmi err_stack_overflow

        ; has the stack underflowed?
        ; this is dependent on the stack's size
        cpx # PL_STACK_SIZE
        bcs err_stack_underflow

        ; implementation error!
        ;
        ; a stack error has been initiated, but the stack
        ; is neither under- nor over-flowed
        kil

err_stack_overflow:
        ;-----------------------------------------------------------------------
        lda # 1
        jmp sys_error

err_stack_underflow:
        ;-----------------------------------------------------------------------
        lda # 0
        jmp sys_error

err_type:
        ;-----------------------------------------------------------------------
        ; check for stack underflow / overflow
        ;
        cmp # TOKEN_STK         ; is the stack-index on one of the end markers?
        beq err_stack           ; critical stack under/over-flow error

        lda # 2
        jmp sys_error


get_type_byte:
;===============================================================================
; get the data-type of the item atop the stack, but error if it is not a byte.
; (stack under/over-flow automatically raises an error)
;
; in:   X       stack-index
;
; out:  A       data-type (byte)
;       X, Y    (preserved)
;
;-------------------------------------------------------------------------------
        ; read the data-type without checking stack position;
        ; error tokens exist at the bytes just outside the data-type stack
        ; to easily tell us of stack under/overflow without checking the index
        ;
        lda zp_type, x
        bne err_type            ; error if not a byte
        rts                     ; is a byte, return


get_type_word:
;===============================================================================
; get the data-type of the item atop the stack, but error if it is not a word.
; (stack under/over-flow automatically raises an error)
;
; in:   X       stack-index
;
; out:  A       data-type (word)
;       X, Y    (preserved)
;
;-------------------------------------------------------------------------------
        ; read the data-type without checking stack position;
        ; error tokens exist at the bytes just outside the data-type stack
        ; to easily tell us of stack under/overflow without checking the index
        ;
        lda zp_type, x
        bpl err_type            ; not a word?
        rts                     ; is a word, return


;;get_type_token:
;;;=============================================================================
;;; get the data-type of the item atop the stack, but error if it is not a token.
;;; (stack under/over-flow automatically raises an error)
;;;
;;; NOTE: tokens are intended to be opaque, implementation-specific values,
;;;       and should *not* be exposed to Pling programs. that is, Pling programs
;;;       can compare tokens, but cannot get at their date-type constant value
;;;       (e.g. EOD might be 5 in one implementation, but 128 in another)
;;;
;;;-----------------------------------------------------------------------------
;;        ; read the data-type without checking stack position;
;;        ; error tokens exist at the bytes just outside the data-type stack
;;        ; to easily tell us of stack under/overflow without checking the index
;;        ;
;;        ; TODO: what should the fast-path for this?
;;        ;       if we are expecting a token, that should be fastest,
;;        ;       but if we're doing error-checking for results that will 99%
;;        ;       of the time be OK, we want the byte to be the fastest
;;        ;
;;        lda zp_type, x
;;        beq err_type            ; a byte, unwanted
;;        bmi err_type            ; a word, unwanted
;;
;;        ; the stack markers are always an error,
;;        ; even though we're looking for tokens!
;;        cmp # TOKEN_STK
;;        beq err_stack
;;        ; when you have eliminated the impossible,
;;        ; whatever remains, however improbable,
;;        ; must be a token
;;        rts


peek_byte:
;===============================================================================
; reads the byte value atop the stack, checking underflow and data-type.
;
; in:   X       stack index
;
; out:  A       byte value
;       X, Y    (preserved)
;
;-------------------------------------------------------------------------------
        ; read the data-type without checking stack position;
        ; error tokens exist at the bytes just outside the data-type stack
        ; to easily tell us of stack under/overflow without checking the index
        lda zp_type, x
        bne err_type
        ; all valid, get the byte
        lda zp_stack, x
        rts


peek_word:
;===============================================================================
; reads the word value atop the stack, checking underflow and data-type
;
; in:   X       stack index
;
; out:  A       byte value
;       X, Y    (preserved)
;
;-------------------------------------------------------------------------------
        lda zp_type, x
        bpl err_type            ; not a word!

        lda zp_stack+0, x
        ldy zp_stack+1, x

        rts


pop_int:
;===============================================================================
; pops the top item from the stack, be it a byte or word. if a byte is popped,
; the Y register is set to zero, so as to automatically form a word, if desired
;
; in:   X       stack-index
;
; out:  X       stack index, updated
;       A       word lo-byte, or single byte
;       Y       word hi-byte, or zero if byte
;       c       0 for a byte, 1 for a word
;
;-------------------------------------------------------------------------------
        ; get the data-type from the current position in the stack:
        ;
        ; micro-optimisation: because any token will be considered an error
        ; for the purposes of this routine, we do not need to check ahead of
        ; time for stack under/over-flow -- the under/over-flowed positions
        ; in the stack already contain a special token for this purpose
        ;
        lda zp_type, x
        
        ; we want bytes to be the fastest, so even though the branch-taken
        ; comparison takes an extra cycle, it is faster than going through
        ; the additional comparisons that follow, i.e. 3 cycles for one BEQ,
        ; is faster than 4 cycles for skipping BEQ+BPL
        ; 
        beq @byte               ; pop a byte
        bpl err_type            ; it's a token -- handle error

@word:  ; read a word:
        ;-----------------------------------------------------------------------
        lda zp_stack+0, x
        ldy zp_stack+1, x
        
        inx                     ; raise the stack...
        inx                     ; ...twice
        sec                     ; return c=1 for word
        rts

        ; read a byte:
        ;-----------------------------------------------------------------------
@byte:  lda zp_stack, x         ; read the byte atop the stack
        ldy # 0                 ; set Y to 0 to form a word
        inx                     ; raise the stack level
        clc                     ; return c=0 for byte
        rts


pop_byte:
;===============================================================================
;
; in:   X       stack-index
;
; out:  A       byte value
;       X       stack-index, updated
;       Y       (preserved)
;
;-------------------------------------------------------------------------------
        ; read the data-type without checking stack position;
        ; error tokens exist at the bytes just outside the data-type stack
        ; to easily tell us of stack under/overflow without checking the index
        ;
        lda zp_type, x
        bne err_type            ; any non-byte type is an error!

        lda zp_stack, x         ; read the byte
        inx                     ; raise the stack
        rts


pop_word:
;===============================================================================
;
;-------------------------------------------------------------------------------
        ; read the data-type without checking stack position;
        ; error tokens exist at the bytes just outside the data-type stack
        ; to easily tell us of stack under/overflow without checking the index
        ;
        lda zp_type, x
        bpl err_type            ; any non-word type is an error!

        lda zp_stack+0, x       ; word lo-byte
        ldy zp_stack+1, x       ; word hi-byte
        
        ; raise the stack twice
        inx
        inx
        rts


pop_if_token:
;===============================================================================
; pop the top item on the stack, only if it's a token:
; no action is taken for other data-types
;
; in:   X       stack index
;
; out:  Y       token's data-type, zero for no-token
;       A       the token's value, zero for no-token
;       X       stack-index, updated if token
;
;-------------------------------------------------------------------------------
        ; read the data-type without checking stack position;
        ; error tokens exist at the bytes just outside the data-type stack
        ; to easily tell us of stack under/overflow without checking the index
        ;
        lda zp_type, x
        ; is it a token-type?
        beq @skip               ; it's a byte, ignore
        bmi @skip               ; it's a word, ignore

        cmp # TOKEN_STK         ; if the stack is empty,
        beq @skip               ; ignore

        ; when you have eliminated the impossible,
        ; whatever remains, however improbable,
        ; must be a token
        tay                     ; move the token's type to the Y register
        lda zp_stack, x         ; read the token's value
        inx                     ; raise the stack level
        rts

        ;-----------------------------------------------------------------------
@skip:  lda # 0                 ; return A = 0
        tay                     ; return Y = 0
        rts


pop_token_EOD:
;===============================================================================
; 
; out:  z       z=1 no EOD token present. z=0 EOD was present, and removed
;       A, Y    (clobbered)
;
;-------------------------------------------------------------------------------
        ; check the top item and remove it only if it's a token
        jsr pop_if_token
        ; the return value will be non-zero if it is a token,
        ; but we only care if it's specifically EOD; return
        ; zero / non-zero accordingly
        cpy # TOKEN_EOD
        rts
