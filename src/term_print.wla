; Pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; term_print.wla : screen output
;===============================================================================
; label:                    stack:              term-name:
;-------------------------------------------------------------------------------
; term_print_newline:         --                .n
; term_print:               b --                .
; term_print_int:           i --                .int
; term_print_hex:           i --                .hex
; term_print_bin:           i --                .bin
; term_printStr:            a --                .str
; term_print_stack            --                .stack
;

; .n ( -- )
;===============================================================================
; print a newline (CR/LF) character:
;-------------------------------------------------------------------------------
        .term   ".n"

term_print_newline:
        ;-----------------------------------------------------------------------
        lda # SYS_RETURN        ; use the system's CR/LF character code
        jmp sys_chrout          ; print, skipping character conversion


; . ( b -- )
;===============================================================================
; print the byte atop the stack as an ASCII character:
; data-type error occurs if top of stack is not a byte
;
; in:   byte    ASCII code to print to screen
;-------------------------------------------------------------------------------
        .term   "."

term_print:
        ;-----------------------------------------------------------------------
        ; pop the byte (checking for underflow)
        jsr pop_byte
        ; print the character code, with conversion
        ; to the system's native character encoding
        jmp print_asc


; .int ( i -- )
;===============================================================================
; print the integer atop the stack as a decimal string:
;
; in:   int     integer (byte or word) to print as decimal
;
; TODO: use the top of the stack as the working space?
;-------------------------------------------------------------------------------
        .term   ".int"

term_print_int:
        ;-----------------------------------------------------------------------
        ; pop the integer (byte or word), checking for underflow
        ; TODO: optimised routine for printing a byte
        jsr pop_int
        bcc @byte

@word:  sta zp_word+LO
        sty zp_word+HI

; adapted from:
; <http://forum.6502.org/viewtopic.php?p=55800#p55800>
;
; TODO: obviously move this to "term_math" and use that instead
;
@print: lda # 0                 ; null delimiter for print
        pha
@div10: ; divide value by 10
        lda # 0
        sta zp_temp2            ; clr BCD
        lda # 16
        sta zp_temp1            ; {>} = loop counter

@loop:  asl zp_word+LO          ; value is gradually replaced
        rol zp_word+HI          ; with the quotient
        rol zp_temp2            ; BCD result is gradually replaced
        lda zp_temp2            ; with the remainder
        sec
        sbc # 10                ; partial BCD >= 10 ?
        bcc +
        sta zp_temp2            ; yes: update the partial result
        inc zp_word+LO          ; set low bit in partial quotient

+       dec zp_temp1
        bne @loop               ; loop 16 times
        
        lda zp_temp2
        ora # '0'               ; convert BCD result to ASCII
        pha                     ; stack digits in ascending
        lda zp_word+LO          ; order ('0' for zero)
        ora zp_word+HI
        bne @div10              ; } until value is 0
        pla

-       jsr sys_chrout          ; print digits in descending
        pla                     ; order until delimiter is
        bne -                   ; encountered

        rts

        ;-----------------------------------------------------------------------
@byte:  ; this routine for converting a byte to decimal digits is adapted from:
        ; <https://codebase64.org/doku.php?id=base:tiny_.a_to_ascii_routine>
        ;
        ; hundreds:
        ;-----------------------------------------------------------------------
        sec
        ldy # '0'-1             ; increment using an ASCII digit!
-       iny                     ; increment hundreds-digit,
        sbc # 100               ; for each 100 decimal subtracted
        bcs -                   ; keep going?
        pha                     ; (put aside the remainder)

        tya                     ; get hundreds-digit:
        cmp # '0'               ; is it a zero?
        beq +                   ; if yes, don't print leading zeroes
        jsr sys_chrout          ; print the digit
+       clc                     ; (carry state unknown)

        ; tens & ones:
        ;-----------------------------------------------------------------------
        pla                     ; retrieve the working remainder
        ldy # '9'+1             ; decrement using an ASCII digit!
-       dey                     ; decrement the tens-digit,
        adc # 10                ; for each 10 decimal subtracted
        bmi -                   ; keep going?

        adc # '0'-1             ; make it an ASCII numeral
        pha                     ; (put aside the remainder!)

        tya                     ; get tens-digit:
        cmp # '0'               ; is the digit a zero?
        beq +                   ; if yes, don't print leading zeroes
        jsr sys_chrout          ; print the digit

+       pla                     ; retrieve the 1s-digit
        jmp sys_chrout          ; print the digit


; .hex ( i -- )
;===============================================================================
; print the integer atop the stack as a hexadecimal string:
;
; in:   int     integer (byte or word) to print as hexadecimal
;
; <http://beebwiki.mdfs.net/Number_output_in_6502_machine_code>
;-------------------------------------------------------------------------------
        .term   ".hex"

term_print_hex:
        ;-----------------------------------------------------------------------
        jsr pop_int
        bcc @byte

        ;-----------------------------------------------------------------------
        ; TODO: this is clumsy, and we could do much better
        ;       by manually reading the stack
        ;
@word:  pha                     ; put aside lo-byte
        tya                     ; start with hi-byte first
        jsr @byte               ; print hi-byte
        pla                     ; get lo-byte and print

        ;-----------------------------------------------------------------------
@byte:  tay                     ; backup original value

        ; move top nybble to bottom nybble
        lsr
        lsr
        lsr
        lsr
        jsr @conv

        tya                     ; restore original value
        and # %00001111         ; mask out original bottom nybble

@conv:  ;-----------------------------------------------------------------------
        ; NMOS 6502's (including the 6510) have a bug whereby the decimal flag
        ; is not guaranteed to clear on system-startup or interrupt. this means
        ; that `cld` *must* be used by the system during interrupts to avoid
        ; decimal mode in your code leaking into the interrupt routine!
        ;
        ; (this bug is fixed on CMOS-based 6502's such as the 65C02 & 65C816)
        ;
        ; whilst the C64 KERNAL does clear the decimal mode on startup,
        ; it does not clear it upon ROM-enabled interrupt, meaning that
        ; we must disable interrupts any time we are using decimal mode!
        ;
        ; the time spent in decimal mode / interrupts-off must be kept to
        ; a minimum as it may otherwise impact the C64's interrupt-driven
        ; jiffy-clock -- this is why we don't do the character printing
        ; with interrupts disabled: we don't know how long this will take
        ; on any particular system, and some systems may pause for
        ; user-input when scrolling
        ;
.IFDEF  CPU_6502
        ;///////////////////////////////////////////////////////////////////////
        sei                     ; disable interrupts
.ENDIF  ;///////////////////////////////////////////////////////////////////////
        sed                     ; turn decimal mode on
        clc                     ; clear carry before adding
        adc # $90               ; produce $90-$99 or $00-$05
        adc # $40               ; produce $30-$39 or $41-$46
        cld                     ; turn decimal mode off

.IFDEF  CPU_6502
        ;///////////////////////////////////////////////////////////////////////
        cli                     ; re-enable interrupts
.ENDIF  ;///////////////////////////////////////////////////////////////////////
        jmp sys_chrout


; .bin ( i -- )
;===============================================================================
; print the integer atop the stack as a binary string:
;
; in:   int     integer (byte or word) to print as binary
;-------------------------------------------------------------------------------
        .term   ".bin"

term_print_bin:
        ;-----------------------------------------------------------------------
        jsr pop_int
        bcc @byte

        ;-----------------------------------------------------------------------
@word:  pha                     ; put aside lo-byte
        sty zp_temp1            ; prepare hi-byte for printing
        jsr @byte               ; print the hi-byte first
        
        pla                     ; retrieve the lo-byte...
        sta zp_temp1            ; prepare byte to print

        ;-----------------------------------------------------------------------
        ; instead of working out if each bit is 0 or 1 and converting these to
        ; ASCII digits, we will instead use ASCII "0" and bump it up to "1"
        ;
@byte:  ldy # SYS_0 >> 1        ; this is our base constant for "0"
        
        asl zp_temp1            ; pop a bit off the source number       ;+5
        tya                     ; retrieve our "0" constant             ;+2
        rol                     ; add the bit to it                     ;+2
        jsr sys_chrout          ; print the 8th digit                   ;+6

        asl zp_temp1
        tya
        rol
        jsr sys_chrout          ; print the 7th digit

        asl zp_temp1
        tya
        rol
        jsr sys_chrout          ; print the 6th digit

        asl zp_temp1
        tya
        rol
        jsr sys_chrout          ; print the 5th digit

        asl zp_temp1
        tya
        rol
        jsr sys_chrout          ; print the 4th digit

        asl zp_temp1
        tya
        rol
        jsr sys_chrout          ; print the 3rd digit

        asl zp_temp1
        tya
        rol
        jsr sys_chrout          ; print the 2nd digit

        asl zp_temp1
        tya
        rol
        jmp sys_chrout          ; print the 1st digit


; .str ( a -- )
;===============================================================================
; print the string pointed to by the address atop the stack:
; the address is consumed
;-------------------------------------------------------------------------------
        .term   ".str"

term_print_str:
        ;-----------------------------------------------------------------------
        ; pop the address, error if not a word
        jsr pop_word            ; returns address in A/Y
        jmp print_str           ; takes address in A/Y and prints!


; .stack ( -- )
;===============================================================================
; pretty-prints the contents of the entire stack, for debugging purposes:
; stack contents are not modified. produces output of this style:
;
;       item type   hex            binary dec   
;       ---------------------------------------- 
;        1st byte $..00 %........00000000     0
;        2nd word $FFFF %1111111111111111 65535
;        3rd tokn END OF DATA
;
; TODO: this will be easier to produce when we have number-formatting routines
; TODO: this should be part of the console and not the core 
;-------------------------------------------------------------------------------
        .term   ".stack"

term_print_stack:
        ;-----------------------------------------------------------------------
        cpx # PL_STACK_SIZE     ; is the stack empty?
        bcc +                   ; not empty, skip ahead

        ; print the "empty" message:
        ;-----------------------------------------------------------------------
        jsr print_this
            .BYTE   "empty"
            .BYTE   NUL
        rts

        ;=======================================================================
@done:  .plx                    ; restore original stack index
        rts

        ; print the header:
        ;-----------------------------------------------------------------------
+       jsr print_this
            ; TODO: this is CBM/C64-specific
            .BYTE   PET_YELLOW, PET_RVRS_ON
            .BYTE   "item type   hex            binary dec   "
            .BYTE   PET_WHITE, PET_RVRS_OFF
            .BYTE   NUL

        ; the stack index measures hardware bytes, not "items" on the stack,
        ; as items can be bytes or words, so we need a counter for items
        lda # 1
        sta zp_index

        ; backup the current stack index; we'll walk down
        ; the stack, as if we were popping every item
        .phx

        ; walk the stack:
        ;=======================================================================
@item:  lda zp_type, x          ; read the data-type of the current item
        cmp # TOKEN_STK         ; is it the bottom of the stack?
        beq @done               ; yes? finish printing
        
        ; print the item number:
        ;
        pha                     ; put aside the data type;
        lda zp_index            ; begin printing the line-item
        cmp # 10
        bcs +
        
        lda # SYS_SPC
        jsr sys_chrout
        lda zp_index

+       jsr term_print_int@byte

        tay
        cpy # '5'
        bcc +
        ldy # '4'
+       lda @ord1-'0', y
        jsr print_asc
        lda @ord2-'0', y
        jsr print_asc

        ; data-type:
        ;-----------------------------------------------------------------------
        pla
        bmi @word               ; it's a word...
        beq @byte               ; it's a byte...

        ; when you have eliminated the impossible,
        ; whatever remains, however improbable,
        ; must be a token
        ;
        ; TODO: print token type & value
@token: jsr print_this
            .BYTE   " tokn ", SYS_RETURN
            .BYTE   NUL
        
        .plx
        rts

        ; deconstruct a word:
        ;-----------------------------------------------------------------------
@word:  jsr print_this
            .BYTE   " word $"
            .BYTE   NUL

        lda zp_stack+LO, x
        ldy zp_stack+HI, x
        jsr term_print_hex@word

        jsr print_this
            .BYTE   " %"
            .BYTE   NUL

        lda zp_stack+LO, x
        ldy zp_stack+HI, x
        jsr term_print_bin@word

        lda # SYS_SPC
        jsr sys_chrout

        lda zp_stack+LO, x
        ldy zp_stack+HI, x
        jsr term_print_int@word

        lda # SYS_RETURN
        jsr sys_chrout

        inx
        inx
        inc zp_index
        jmp @item

        ; deconstruct a byte:
        ;-----------------------------------------------------------------------
@byte:  jsr print_this
            .BYTE   " byte $.."
            .BYTE   NUL

        lda zp_stack, x
        jsr term_print_hex@byte

        jsr print_this
            .BYTE   " %........"
            .BYTE   NUL

        lda zp_stack+LO, x
        ldy # 0
        jsr term_print_bin@byte

        lda # SYS_SPC
        jsr sys_chrout

        lda zp_stack+0, x
        jsr term_print_int@byte

        lda # SYS_RETURN
        jsr sys_chrout

        inx
        inc zp_index
        jmp @item

        ;=======================================================================
        ;        0    1    2    3    4...
@ord1:  .BYTE   "t", "s", "n", "r", "t"
@ord2:  .BYTE   "h", "t", "d", "d", "h"
