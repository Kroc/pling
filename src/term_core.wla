; Pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; term_core.wla : stack routines available to Pling scripts
;===============================================================================

; ! ( b w -- )
;===============================================================================
; pokes the byte atop the stack into the address below it:
; all items are consumed
;
;-------------------------------------------------------------------------------
        .term   "!"

term_set:                                                               ;=6
        ;-----------------------------------------------------------------------
        ; this is a core term so it needs to be fast. we could just pop the
        ; byte and word but we need to save whatever cycles we can here, so
        ; we verify the stack contents first and manually raise the stack
        ;
        lda zp_type, x          ; check if the top item is a byte       ;+4=10
        bne @err                ; -- top byte must be a byte            ;+2=12
        inx                     ; raise the stack by one                ;+2=14
        lda zp_type, x          ; check if the next item is a word      ;+4=18
        bpl @err                ; high-bit means word                   ;+2=20
        inx                     ; increment the stack...                ;+2=22
        inx                     ; ...past the word                      ;+2=24

        ; (note that now that the stack pointer is above the byte+word, we
        ;  need to reference our parameters accounting for this extra offset) 
        ;
.ifdef  CPU_65C02
        ;///////////////////////////////////////////////////////////////////////
        ; we can indirect X-reference on the 65C02! this also allows
        ; for the same code for RAM and ROM operation
        ;
        lda zp_stack-3, x       ; read poke value from the stack        ;+4=28
        sta [zp_stack-2, x]     ; write via poke address on the stack   ;+6=34

        ;6502:
.else   ;///////////////////////////////////////////////////////////////////////
        .ifdef  OPTIMIZE_ROM
                ;///////////////////////////////////////////////////////////////
                ; for ROM operation, copy the address into zero-page:
                ;
                lda zp_stack-2, x       ; read poke-address, lo-byte    ;+4=28
                sta zp_addr+LO                                          ;+3=31
                lda zp_stack-1, x       ; read poke-address, hi-byte    ;+4=35
                sta zp_addr+HI                                          ;+3=38
                ldy # 0                 ; required for 6502, :/         ;+2=40
                lda zp_stack-3, x       ; read poke value               ;+4=44
                sta [zp_addr], y                                        ;+6=50

        .else   ;///////////////////////////////////////////////////////////////
                ; in RAM, we can rewrite the address of
                ; the STA instruction that follows
                ;
                lda zp_stack-2, x       ; read poke-address, lo-byte    ;+4=28
                sta.w @sta+1+LO                                         ;+4=32
                lda zp_stack-1, x       ; read poke-address, hi-byte    ;+4=36
                sta.w @sta+1+HI                                         ;+4=40
                lda zp_stack-3, x       ; read poke value               ;+4=44
@sta:           sta $8888               ; write the byte                ;+4=48

        .endif  ;///////////////////////////////////////////////////////////////
.endif  ;///////////////////////////////////////////////////////////////////////
        rts

        ;-----------------------------------------------------------------------
@err:   jmp err_type


; ? ( w -- b )
;===============================================================================
; peeks a byte from the address on the stack, (consuming the address)
; and pushes the value to the stack
;
;-------------------------------------------------------------------------------
;;        .term   "?"
;;
;;term_get:
;;        ;---------------------------------------------------------------------
;;        lda [zp_stack, x]
;;        inx
;;        sta zp_stack, x
;;
;;        rts

; drop ( x -- )
;===============================================================================
; forget the top-most item on the stack, raising the stack to the next item
;
;-------------------------------------------------------------------------------
        .term   "drop"

term_drop:
        ;-----------------------------------------------------------------------
        lda zp_type, x          ; get the data-type of the top item
        beq @byte               ; drop a byte
        
        ; this leaves either words or tokens,
        ; check for the stack-underflow token:
        cmp # TOKEN_STK
        beq @err                ; stack is empty, can't drop!
        
@word:  inx                     ; drop word
@byte:  inx                     ; drop byte
        rts
        ;-----------------------------------------------------------------------
@err:   jmp err_type


; extend ( b -- w )
;===============================================================================
; converts the integer on top of the stack to a word:
; if the integer is already a word, no change happens.
; stack underflow occurs if the stack is empty
;
;-------------------------------------------------------------------------------
        .term   "extend"

term_extend:
        ;-----------------------------------------------------------------------
        ; read the data-type without checking stack position;
        ; error tokens exist at the bytes just outside the data-type stack
        ; to easily tell us of stack under/overflow without checking the index
        ;
        lda zp_type, x
        bpl +                   ; handle byte or token...

        ; top-of-stack is already a word, exit
        rts

+       bne @err
        ;-----------------------------------------------------------------------
        ; the current item on the stack is a byte, so expand it to a word

        .lowerStack             ; lower the stack by one
        lda zp_stack+HI, x      ; read the old byte
        sta zp_stack+LO, x      ; write it to the word lo-byte
.IFDEF  CPU_65C02
        ;///////////////////////////////////////////////////////////////////////
        stz zp_stack+HI, x      ; set word hi-byte to zero

.ELSE   ;6502:
        ;///////////////////////////////////////////////////////////////////////
        lda # 0
        sta zp_stack+HI, x      ; set word hi-byte to zero

.ENDIF  ;///////////////////////////////////////////////////////////////////////
        ; change the data-types for the top two bytes to word-lo/hi
        jmp set_type_word

        ;-----------------------------------------------------------------------
@err    jmp err_type