; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; core.wla
;===============================================================================

; ! ( b w -- )
;===============================================================================
; pokes the byte atop the stack into the address below.
; all items are consumed
;
;-------------------------------------------------------------------------------
;;        .term   "!"
;;
;;term_set:
;;        ;---------------------------------------------------------------------
;;        lda zp_stack+2, x       ; get value to store (3rd byte)
;;        sta [zp_stack, x]       ; store via the address on the stack
;;
;;        inx                     ; consume...
;;        inx                     ; three...
;;        inx                     ; bytes
;;
;;        rts

; @ ( w -- b )
;===============================================================================
; peeks a byte from the address on the stack, (consuming the address)
; and pushes the value to the stack
;
;-------------------------------------------------------------------------------
;;        .term   "@"
;;
;;term_get:
;;        ;---------------------------------------------------------------------
;;        lda [zp_stack, x]
;;        inx
;;        sta zp_stack, x
;;
;;        rts

; drop ( x -- )
;===============================================================================
; forget the top-most item on the stack, moving the stack down
; to the next item
;
;-------------------------------------------------------------------------------
        .term   "drop"

term_drop:
        ;-----------------------------------------------------------------------
        ; is the top-most item a byte or a word?
        lda zp_type, x
        beq @byte
        bmi @word

        ; TODO: handle stack under/over-flow token
        inc VIC_BORDER
        jmp @byte

@word:  inx                     ; drop word
@byte:  inx                     ; drop byte
        rts


; exec ( w -- )
;===============================================================================
; execute the address on top of the stack
;
;-------------------------------------------------------------------------------
        .term   "exec"

term_exec:
        ;-----------------------------------------------------------------------
        ; we must reduce the stack by 2 bytes *before* we jump!
        ; (check for stack underflow before jumping)
        ; TODO: data-type check!
        .raiseStack2

.IFDEF  CPU_65C02
        ; 65C02: do a jump directly from the data stack,
        ; with -2 to compensate for already having popped the stack
        jmp [zp_stack-2, x]

.ELSE   ; 6502:
        lda zp_stack-2, x
        sta zp_addr+LO
        lda zp_stack-1, x
        sta zp_addr+HI
        jmp [zp_addr]
.ENDIF


; byte2word ( b -- w )
;===============================================================================
; converts the integer on top of the stack to a word:
; if the item is already a word, no change happens.
; stack underflow occurs if the stack is empty
;
;-------------------------------------------------------------------------------
        .term   "byte2word"

term_byte2word:
        ;-----------------------------------------------------------------------
        ; read the data-type without checking stack position;
        ; error tokens exist at the bytes just outside the data-type stack
        ; to easily tell us of stack under/overflow without checking the index
        ;
        lda zp_type, x
        bpl +                   ; handle byte or token...

        ; top-of-stack is already a word, exit
        rts

        ;-----------------------------------------------------------------------
+       bne @err

        .lowerStack             ; lower the stack by one
        lda zp_stack+1, x       ; read the old byte
        sta zp_stack+0, x       ; write it to the word lo-byte
.IFDEF  CPU_65C02
        stz zp_stack+1, x       ; set word hi-byte to zero
.ELSE   ;6502
        lda # 0
        sta zp_stack+1, x       ; set word hi-byte to zero
.ENDIF
        ; change the data-types for the top two bytes to word-lo/hi
        jmp set_type_word

        ;-----------------------------------------------------------------------
        ; is it one of the stack error markers?
@err:   cmp # TOKEN_STK
        beq +
        jmp err_type
        ; this handler will work out if the stack under- or over-flowed
+       jmp err_stack