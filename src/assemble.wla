; pling! (c) copyright Kroc Camen 2019-2020. unless otherwise noted,
; licenced under a MIT licence; you may reuse and modify this code
; how you please as long as you retain the copyright notice
;
; assemble.wla : routines for assembling code into new terms
;===============================================================================

asm:
;===============================================================================
; writes a single byte to user-space:
;
; in:   A       byte value to write
;
; out:  A, X, Y (preserved)
;
;-------------------------------------------------------------------------------
        ; write the byte to the current cursor position:
.IFDEF  CPU_65C02
        sta [zp_here]
.ELSE   ;6502:
        sty zp_index            ; backup Y                              ;+3

        ldy # 0                                                         ;+2
        sta [zp_here], y                                                ;+6
        
        ldy zp_index          ; restore Y                               ;+3
.ENDIF
        inc zp_here+LO
        beq +                   ; 1-cycle faster for the common case,
        rts                     ; at the cost of one extra byte
+       inc zp_here+HI
        rts


asm_jsr:
;===============================================================================
; assembles a routine call in user-space:
;
; in:   A       address, lo-byte
;       Y       address, hi-byte
;
; out:  X       (preserved)
;       A, Y    (clobbered)
;
;-------------------------------------------------------------------------------
        pha                     ; put aside lo-byte, Y is hi-byte

        ; assemble `JSR $nnnn`:
        ;-----------------------------------------------------------------------
        lda # CPU_JSR           ; use a `JSR` opcode
        jsr asm                 ; write opcode to user-space
        pla                     ; retrieve value lo-byte
        jsr asm                 ; write the parameter, lo-byte
        tya                     ; retrieve value hi-byte
        jmp asm                 ; write the parameter, hi-byte


asm_rts:
;===============================================================================
; assembles an RTS instruction in user-space:
;
;-------------------------------------------------------------------------------
        lda # CPU_RTS
        jmp asm